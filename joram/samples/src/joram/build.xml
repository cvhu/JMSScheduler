<project default="compile" basedir="." xmlns:m2="urn:maven-artifact-ant">

  <!-- Initializes the environment paths and properties -->
  <target name="init">
    <!-- Initializes the directory structure properties -->
    <property name="src.dir" location="."/>
    <property name="ship.dir" location="../../../ship"/>
    <property name="obj.dir" location="../../classes"/>
    <property name="lib.dir" location="${ship.dir}/lib"/>
    <property name="run.dir" location="../../run"/>
    <property name="conf.dir" location="../../config"/>
    <property name="felix.dir" location="${ship.dir}/bin/"/>
    <property name="bundle.dir" location="${ship.dir}/bundle" />
    
    <!-- Project classpath needed for execution -->
    <path id="project.class.path">
      <pathelement path="${java.class.path}/"/>
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${bundle.dir}">
         <include name="*.jar"/>
      </fileset>
      <pathelement path="${obj.dir}/joram"/>
      <pathelement path="${run.dir}"/>
    </path>
    <property name="project.class.path" refid="project.class.path"/>
    
    <path id="felix.class.path">
      <pathelement path="${java.class.path}/"/>
      <fileset file="${felix.dir}/felix.jar"/>
      <pathelement path="${run.dir}"/>
    </path>
    <property name="felix.class.path" refid="felix.class.path"/>
  </target>

  <!-- Cleans run directory -->
  <target name="reset" depends="init"
          description="--> Cleans run directory">
    <delete quiet="true" dir="${run.dir}"/>
  </target>
    
  <!-- Cleans samples - deletes generated files -->
  <target name="clean" depends="init,reset"
          description="--> Deletes generated files">
    <delete quiet="true" dir="${obj.dir}"/>
  </target>

  <!-- Compiles -->
  <target name="compile" depends="init,clean"
    description="--> Compile all samples">
    <mkdir dir="${obj.dir}/joram"/>
    <javac srcdir="${src.dir}"
           destdir="${obj.dir}/joram"
           source="1.5" target="1.5" debug="true"
           deprecation="${deprecation}"
           optimize="${optimize}"
           nowarn="${nowarn}"
           verbose="${verbose}"
           includeantruntime="false">
      <classpath refid="project.class.path"/>
      <include name="**/*.java"/>
    </javac>
  </target>
    
  <!-- Initializes a centralized configuration -->
  <target name="server_init" depends="init">
    <mkdir dir="${run.dir}/server${sid}"/>
    <copy file="${conf.dir}/a3config.dtd" todir="${run.dir}/server${sid}"/>
    <copy file="${conf.dir}/a3debug.cfg" todir="${run.dir}/server${sid}"/>
    <copy file="${a3.conf}" tofile="${run.dir}/server${sid}/a3servers.xml"/>
    <copy file="${osgi.conf}" tofile="${run.dir}/server${sid}/config.properties"/>
    <!--copy file="${monit.conf}" tofile="${run.dir}/server${sid}/MonitoringConfig.xml"/-->
  </target>

  <target name="simple_init" depends="init">
    <copy file="${conf.dir}/a3debug.cfg" todir="${run.dir}"/>
    <copy file="${conf.dir}/jndi.properties" todir="${run.dir}"/>
  </target>

  <target name="server" depends="server_init">
    <java classname="org.apache.felix.main.Main"
          failonerror="no" fork="yes"
          dir="${run.dir}/server${sid}">
      <classpath path="${felix.class.path}"/>
      <jvmarg line="-Dfelix.config.properties=file:config.properties -Dfr.dyade.aaa.agent.AgentServer.id=${sid} -Dcom.sun.management.jmxremote"/>
      <!-- jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y"/ -->
    </java>
  </target>
  
  <!-- Start a single server in NullTransaction mode -->
  <target name="single_server" depends="init"
          description="--> Starts a single server in non-persistent mode">
    <antcall target="server">
      <param name="sid" value="0"/>
      <param name="a3.conf" value="${conf.dir}/centralized_a3servers.xml"/>
      <param name="osgi.conf" value="${conf.dir}/config.properties"/>
    </antcall>
  </target>

  <!-- **************************************************
       * Classic Sample
       ************************************************** -->

  <!-- Setup the classic configuration -->
  <target name="classic_admin" depends="simple_init"
          description="--> Runs administration code for classic sample (centralized architecture)">
    <java classname="classic.ClassicAdmin"
      failonerror="no" fork="yes"
      dir="${run.dir}">
      <classpath path="${project.class.path}"/>
      <!-- jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y" / -->
    </java>
  </target>
  
  <!-- Code using old JMS 1.0 API - PTP and P/S domains -->

  <!-- Runs the classic sender client -->
  <target name="sender" depends="simple_init"
    description="--> Starts a Sender client">
    <java classname="classic.Sender" failonerror="no" fork="yes"
          dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Runs the classic receiver client -->
  <target name="receiver" depends="simple_init"
    description="--> Starts a Receiver client">
    <java classname="classic.Receiver" failonerror="no" fork="yes"
          dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>
  
  <!-- **************************************************
       * JMS Scheduler Classes
       ************************************************** -->

  <!-- Setup the classic configuration -->
  <target name="scheduler_admin" depends="simple_init"
          description="--> Runs administration code for scheduler tasks (centralized architecture)">
    <java classname="scheduler.Admin"
      failonerror="no" fork="yes"
      dir="${run.dir}">
      <classpath path="${project.class.path}"/>
      <!-- jvmarg line="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y" / -->
    </java>
  </target>

  <!-- Runs the classic sender client -->
  <target name="scheduler_client" depends="simple_init"
    description="--> Starts a Scheduler client">
    <java classname="scheduler.Client" failonerror="no" fork="yes"
          dir="${run.dir}">
      <classpath path="${project.class.path}"/>
      <arg value="${src.dir}/names.txt"/>
    </java>
  </target>

</project>
